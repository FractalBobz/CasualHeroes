@model CasualHeroes.Web.Models.Request

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <script src="~/Scripts/jquery-1.4.4.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
	<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?keyAIzaSyBwNlvB1Ofm38Brm69PSTjOEAcoAEM5fF0&sensor=true"></script>
	<script type="text/javascript">
		$(function () {
			$.geocoder = new google.maps.Geocoder();
			$("#Address").focusout(function () {
				var address = $("#Address").val();
				$.geocoder.geocode({ 'address': address }, function(results, status) {

					// The code below only gets run after a successful Google service call has completed.
					// Because this is an asynchronous call, the validator has already returned a 'true' result
					// to supress an error message and then cancelled the form submission.  The code below
					// needs to fetch the true validation from the Google service and then re-execute the
					// jQuery form validator to display the error message.  Futhermore, if the form was
					// being submitted, the code below needs to resume that submit.

					// Google reported a valid geocoded address
					if (status == google.maps.GeocoderStatus.OK) {
						var goodAddress = results[0].formatted_address;
						$("#Address").val(goodAddress);

						var location = results[0].geometry.location;
						var codedLatitude = location.jb;
						var codedLongitude = location.kb;

						$("#Latitude").val(codedLatitude);
						$("#Longitude").val(codedLongitude);
					}
				});
			});
		});
	</script>
	<title>Create</title>
</head>
<body>
    
    @using (Html.BeginForm()) {
        @Html.ValidationSummary(true)
    
        <fieldset>
            <legend>Request</legend>
    
            <div class="editor-label">
                @Html.LabelFor(model => model.UserId, "User")
            </div>
            <div class="editor-field">
                @Html.DropDownList("UserId", String.Empty)
                @Html.ValidationMessageFor(model => model.UserId)
            </div>
    
            <div class="editor-label">
                @Html.LabelFor(model => model.Title)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Title)
                @Html.ValidationMessageFor(model => model.Title)
            </div>
    
            <div class="editor-label">
                @Html.LabelFor(model => model.Description)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Description)
                @Html.ValidationMessageFor(model => model.Description)
            </div>
    
            <div class="editor-label">
                @Html.LabelFor(model => model.Address)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Address)
                @Html.ValidationMessageFor(model => model.Address)
            </div>
    
            <div class="editor-label">
                @Html.LabelFor(model => model.Latitude)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Latitude)
                @Html.ValidationMessageFor(model => model.Latitude)
            </div>
    
            <div class="editor-label">
                @Html.LabelFor(model => model.Longitude)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Longitude)
                @Html.ValidationMessageFor(model => model.Longitude)
            </div>
    
            <div class="editor-label">
                @Html.LabelFor(model => model.Tags)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Tags)
                @Html.ValidationMessageFor(model => model.Tags)
            </div>
    
            <div class="editor-label">
                @Html.LabelFor(model => model.StartDate)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.StartDate)
                @Html.ValidationMessageFor(model => model.StartDate)
            </div>
    
            <div class="editor-label">
                @Html.LabelFor(model => model.EndDate)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.EndDate)
                @Html.ValidationMessageFor(model => model.EndDate)
            </div>
    
            <div class="editor-label">
                @Html.LabelFor(model => model.CreatedBy)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.CreatedBy)
                @Html.ValidationMessageFor(model => model.CreatedBy)
            </div>
    
            <div class="editor-label">
                @Html.LabelFor(model => model.CreatedOn)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.CreatedOn)
                @Html.ValidationMessageFor(model => model.CreatedOn)
            </div>
    
            <p>
                <input type="submit" value="Create" />
            </p>
        </fieldset>
    }
    
    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</body>
</html>
